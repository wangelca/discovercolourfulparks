generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  clerk_user_id  String    @unique
  username       String?
  email          String    @unique
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt
  firstName      String?
  lastName       String?
  phoneNumber    String?
  publicMetadata String?
  bookings       Booking[] // Added relation to Booking
  payments       Payment[] // Added relation to Payment

  @@map("users")
}

model Park {
  parkId      Int     @id @default(autoincrement())
  name        String
  description String
  location    String
  events      Event[]
  spots       Spot[]

  @@map("park")
}

model Spot {
  spotId          Int       @id @default(autoincrement())
  parkId          Int
  spotName        String
  spotDescription String
  spotHourlyRate  Decimal
  spotDiscount    Decimal
  spotLocation    String
  bookings        Booking[] // Relation to Booking
  park            Park      @relation(fields: [parkId], references: [parkId])
  spotImageUrl      String[]
  parameters      String?

  @@map("spot")
}

model Event {
  eventId       Int       @id @default(autoincrement())
  parkId        Int
  eventName     String
  eventLocation String
  fee           Float
  description   String
  discount      Float
  startDate     DateTime
  startTime     String
  endDate       DateTime
  endTime       String
  bookings      Booking[] // Relation to Booking
  park          Park      @relation(fields: [parkId], references: [parkId])

  @@map("event")
}

model Booking {
  bookingId        Int      @id @default(autoincrement())
  eventId          Int
  id               Int
  spotId           Int // Relation to Spot
  bookingDate      DateTime
  bookingStatus    String
  bookingStartTime DateTime
  event            Event    @relation(fields: [eventId], references: [eventId])
  user             User     @relation(fields: [id], references: [id])
  spot             Spot     @relation(fields: [spotId], references: [spotId]) // Relation to Spot
  payment          Payment? // Relation to Payment

  @@map("booking")
}

model Payment {
  paymentId     Int     @id @default(autoincrement())
  bookingId     Int     @unique
  id            Int
  paymentStatus String
  booking       Booking @relation(fields: [bookingId], references: [bookingId])
  user          User    @relation(fields: [id], references: [id])

  @@map("payment")
}
