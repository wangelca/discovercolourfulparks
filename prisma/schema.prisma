generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  clerk_user_id String   @unique
  username      String?
  email         String   @unique
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt
  password      String
  
  @@map("users")
}

model Admin {
  adminId Int     @id @default(autoincrement())
  name    String
  email   String
  role    String

  @@map("admin")
}

model Park {
  parkId      Int    @id @default(autoincrement())
  name        String
  description String

  spots       Spot[]
  events      Event[]

  @@map("park")
}

model Spot {
  spotId          Int     @id @default(autoincrement())
  parkId          Int     // Foreign key to Park
  spotName        String
  spotDescription String
  spotHourlyRate  Decimal

  park            Park     @relation(fields: [parkId], references: [parkId])
  bookings        Booking[]

  @@map("spot")
}

model Event { 
  eventId         Int     @id @default(autoincrement())
  parkId          Int     // Foreign key to Park
  eventName       String
  eventDate       DateTime
  eventTime       DateTime
  eventLocation   String
  fee             Decimal

  park            Park     @relation(fields: [parkId], references: [parkId])
  bookings        Booking[]

  @@map("event")
}

model Booking {
  bookingId         Int     @id @default(autoincrement())
  id                Int     // Foreign key to User or Admin
  spotId            Int?    // Foreign key to Spot
  eventId           Int?    // Foreign key to Event
  bookingDate       DateTime
  bookingTime       DateTime
  calculatedAmount  Decimal

  spot              Spot?   @relation(fields: [spotId], references: [spotId])
  event             Event?  @relation(fields: [eventId], references: [eventId])
  payment           Payment?

  @@map("booking")
}

model Payment {
  paymentId       Int     @id @default(autoincrement())
  bookingId       Int     @unique // Marking this field as unique for the one-to-one relation
  id              Int     // Foreign key to User or Admin
  paymentStatus   String

  booking         Booking  @relation(fields: [bookingId], references: [bookingId])

  @@map("payment")
}
